{
	function log(message) {
		console.log(message);
	}
}

start
	= _ "#types;" _ x:type_list "#relationships;" _ y:relationship_list _
	"#actions;" _ z:action_list _
	{
		var primitives = [];
		for (var i = 0; i < x.length; i++) {
			if (x[i][0].indexOf("*") != -1) {
				primitives.push(x[i]);
			}
		}
		return {
			type_list: x,
			relationship_list: y,
			action_list: z,
			primitive_list: primitives
		}
	}
	
type_list
	= x:type_def y:type_list _
	{
		return [x].concat(y);
	}
	/ _
	{
		return [];
	}
	
type_def
	= x:type_token _ ";" _
	{
		return [x, []];
	}
	/ x:type_token _ "->" _ y:parent_list ";" _
	{
		return [x, y];
	}
	
parent_list
	= x:type_token _ "," _ y:type_token _
	{
		return [x].concat(y);
	}
	/ x:type_token _
	{
		return [x];
	}
	
type_token
	= x:([a-zA-Z]+)y:([*]?)
	{
		if (y == null) {
			return x.join("");
		}
		else {
			return x.join("") + "*";
		}
	}
	
relationship_list
	= x:relationship_def y:relationship_list _
	{
		return [x].concat(y);
	}
	/ _
	{
		return [];
	}
		
relationship_def
	= x:predicate_token _ "(" _ y:relationship_parameter_list? _ ")" _ ";" _
	{
		if (y == null) y = [];
		var res = {
			predicate: x,
			parameters: y
		}
		return res;
	}
	
predicate_token
	= x:[a-zA-Z]+
	{
		return x.join("");
	}
	
relationship_parameter_list
	= x:type_token __ y:relationship_parameter_list _
	{
		return [x].concat(y);
	}
	/ x:type_token	
	{
		return [x];
	}
	
action_list
	= "name:" _ a:action_name_token _ ";" _ "parameters:" _ b:action_parameter_list? _ ";" _ "preconditions:" _ c:action_condition_list? _ ";" _  "creates:" _ d:create_list? _ ";" _ "effects:" _ e:action_condition_list? _ ";" _ f:action_list
	{
		if (b == null) {
			b = [];
		}
		if (c == null) {
			c = [];
		}
		if (d == null) {
			d = [];
		}
		if (e == null) {
			e = [];
		}
		return [{
			name: a,
			parameters: b,
			preconditions: c,
			creates: d,
			effects: e
		}].concat(f);
	}
	/ _
	{
		return [];
	}
	
action_name_token
	= x:[a-zA-Z ]+
	{
		return x.join("");
	}

action_parameter_list
	= x:type_token __ y:action_parameter_list
	{
		return [x].concat(y);
	}
	/ x:wildcard_token __ y:action_parameter_list
	{
		return [x].concat(y);
	}
	/ x:type_token
	{
		return [x];
	}
	/ x:wildcard_token
	{
		return [x];
	}
	
wildcard_token
	= x:"*"
	{
		return "*";
	}

action_condition_list
	= a:("!"?) b:predicate_token _ "(" c:assertion_parameter_list? _ ")" __ d:action_condition_list
	{
		if (a == null) {
			a = true;
		}
		else {
			a = false;
		}
		if (c == null) {
			c = [];
		}
		return [{
			truth: a,
			predicate: b,
			parameters: c
		}].concat(d);
	}
	/ a:("!"?) b:predicate_token _ "(" c:assertion_parameter_list? _ ")" _
	{
		if (a == null) {
			a = true;
		}
		else {
			a = false;
		}
		if (c == null) {
			c = [];
		}
		return [{
			truth: a,
			predicate: b,
			parameters: c
		}];
	}

assertion_parameter_list
	= x:type_token __ y:assertion_parameter_list
	{
		return [x].concat(y);
	}
	/ x:assertion_variable_token __ y:assertion_parameter_list
	{
		return [x].concat(y);
	}
	/ x:type_token
	{
		return [x];
	}
	/ x:assertion_variable_token
	{
		return [x];
	}

assertion_variable_token
	= x:[0-9]+
	{
		return x.join("");
	}
	
create_list
	= x:create_item __ y:create_list
	{
		return [x].concat(y);
	}
	/ x:create_item _
	{
		return [x];
	}

create_item
	= x:create_owner _ "<" _ y:type_token
	{
		return {
			owner: x,
			parent: y
		}
	}

create_owner
	= x:assertion_variable_token
	{
		return x;
	}
	/ x:type_token
	{
		return y;
	}
_
	= [ \t\r\n]*

__
	= [ \t\r\n]+
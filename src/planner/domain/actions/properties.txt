action: state_person_height(person p, height h, distance_unit u).
pre: introduced(p) ^ !stated_person_height(p) ^ !assigned(h).
post: stated_person_height(p) ^ assigned(h) ^ property_of(p, h) ^ in_unit(h, u) ^ known_in_unit(h, u).
text: "(p) is {h} [u] tall.", "The height of (p) is {h} [u].".
alias: h["the height of (p)"], h<generic_number>.

action: state_person_weight(person p, weight w, mass_unit u).
pre: introduced(p) ^ !stated_person_weight(p) ^ !assigned(w).
post: stated_person_weight(p) ^ assigned(w) ^ property_of(p, w) ^ in_unit(w, u) ^ known_in_unit(w, u).
text: "(p) weighs {w} [u].", "The weight of (p) is {w} [u].".
alias: w["the weight of (p)"], w<generic_number>.

action: state_person_body_temperature(person p, body_temperature b, temperature_unit u).
pre: is_sick(p) ^ !stated_person_body_temperature(p) ^ !assigned(b).
post: stated_person_body_temperature(p) ^ assigned(b) ^ property_of(p, b) ^ in_unit(b, u) ^ known_in_unit(b, u).
text: "The body temperature of (p) is {b} degrees [u].".
alias: b["the body temperature of (p)"], b<generic_number>.

action: state_country_temperature(country c, atmospheric_temperature t, temperature_unit u).
pre: introduced(c) ^ !stated_country_temperature(c) ^ !assigned(t).
post: stated_country_temperature(c) ^ assigned(t) ^ property_of(c, t) ^ in_unit(t, u) ^ known_in_unit(t, u).
text: "The average atmospheric temperature in [c] is {t} degrees [u].".
alias: t["the temperature in (c)"], t<generic_number>.

action: state_cost(item i, cost c).
pre: introduced(i) ^ !stated_cost(i) ^ !assigned(c).
post: stated_cost(i) ^ assigned(c) ^ property_of(i, c).
text: "One [i] costs {c} yen.", "The price of one [i] is {c} yen.".
alias: c["the cost of i"], c<generic_number>.

action: state_money(person p, money m).
pre: introduced(p) ^ !stated_money(p) ^ !assigned(m).
post: stated_money(p) ^ assigned(m) ^ property_of(p, m).
text: "(p) has a total of {m} yen.".
alias: m["money of (p)"], m<generic_number>.

action: state_measure_system_of_country(country c, measure_system m).
pre: introduced(c) ^ !stated_measure_system(c) ^ measure_system_in(c, m).
post: stated_measure_system(c).
text: "[c] uses the [m] for measurement.".
alias: .

action: state_shape(concrete c, shape s).
pre: introduced(c) ^ !stated_shape(c) ^ possible_shape_of(c, s).
post: stated_shape(c) ^ shape_of(c, s).
text: "The [c] is in the shape of a [s].".
alias: .

action: state_side_of_square(concrete c, square s, side x, distance_unit u).
pre: introduced(c) ^ !stated_size_components(c) ^ shape_of(c, s) ^ possible_shape_of(c, s) ^ !assigned(x).
post: stated_size_components(c) ^ assigned(x) ^ property_of(c, x) ^ in_unit(x, u) ^ known_in_unit(x, u).
text: "One side of the [c] measures {x} [u].".
alias: x["the side length of the [c]"], x<generic_number>.

action: state_radius_of_circle(concrete c, circle ci, radius r, distance_unit u).
pre: introduced(c) ^ !stated_size_components(c) ^ shape_of(c, ci) ^ possible_shape_of(c, ci) ^ !assigned(r).
post: stated_size_components(c) ^ assigned(r) ^ property_of(c, r) ^ in_unit(r, u) ^ known_in_unit(r, u).
text: "The radius of the [c] is {r} [u].".
alias: r["the radius of the [c]"], r<generic_number>.

action: state_diameter_of_circle(concrete c, circle ci, diameter d, distance_unit u).
pre: introduced(c) ^ !stated_size_components(c) ^ shape_of(c, ci) ^ possible_shape_of(c, ci) ^ !assigned(d).
post: stated_size_components(c) ^ assigned(d) ^ property_of(c, d) ^ in_unit(d, u) ^ known_in_unit(d, u).
text: "The diameter of the [c] is {d} [u].".
alias: d["the diameter of the [c]"], d<generic_number>.

action: state_radius_of_sphere(concrete c, sphere ci, radius r, distance_unit u).
pre: introduced(c) ^ !stated_size_components(c) ^ shape_of(c, ci) ^ possible_shape_of(c, ci) ^ !assigned(r).
post: stated_size_components(c) ^ assigned(r) ^ property_of(c, r) ^ in_unit(r, u) ^ known_in_unit(r, u).
text: "The radius of the [c] is {r} [u].".
alias: r["the radius of the [c]"], r<generic_number>.

action: state_diameter_of_sphere(concrete c, sphere ci, diameter d, distance_unit u).
pre: introduced(c) ^ !stated_size_components(c) ^ shape_of(c, ci) ^ possible_shape_of(c, ci) ^ !assigned(d).
post: stated_size_components(c) ^ assigned(d) ^ property_of(c, d) ^ in_unit(d, u) ^ known_in_unit(d, u).
text: "The diameter of the [c] is {d} [u].".
alias: d["the diameter of the [c]"], d<generic_number>.

action: state_length_and_width_of_rectangle(concrete c, rectangle r, length l, width w, distance_unit u).
pre: introduced(c) ^ !stated_size_components(c) ^ shape_of(c, r) ^ possible_shape_of(c, r) ^ !assigned(l) ^ !assigned(w).
post: stated_size_components(c) ^ assigned(l) ^ assigned(w) ^ property_of(c, l) ^ property_of(c, w) ^ in_unit(l, u) ^ in_unit(w, u) ^ known_in_unit(l, u) ^ known_in_unit(w, u).
text: "The length of the [c] measures {l} [u] and the width of the [c] measures {w} [u].".
alias: l["the length of the [c]"], w["the width of the [c]"], l<generic_number>, w<generic_number>.